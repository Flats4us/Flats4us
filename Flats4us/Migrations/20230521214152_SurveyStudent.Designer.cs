// <auto-generated />
using System;
using Flats4us.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flats4us.Migrations
{
    [DbContext(typeof(Flats4usContext))]
    [Migration("20230521214152_SurveyStudent")]
    partial class SurveyStudent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Flats4us.Entities.SurveyStudent", b =>
                {
                    b.Property<int>("SurveyStudentId")
                        .HasColumnType("int");

                    b.Property<int>("test")
                        .HasColumnType("int");

                    b.HasKey("SurveyStudentId");

                    b.ToTable("SurveyStudents");

                    b.HasData(
                        new
                        {
                            SurveyStudentId = 5,
                            test = 1
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("AccountCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Flat")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Flats4us.Entities.Moderator", b =>
                {
                    b.HasBaseType("Flats4us.Entities.User");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Moderator");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccountCreationDate = new DateTime(2023, 5, 11, 23, 41, 52, 417, DateTimeKind.Local).AddTicks(2512),
                            City = "Warszawa",
                            Email = "maciej.kowalski@gmail.com",
                            Flat = 2,
                            LastLoginDate = new DateTime(2023, 5, 21, 23, 41, 52, 417, DateTimeKind.Local).AddTicks(2553),
                            Name = "Maciej",
                            Number = 47,
                            Password = "mkowalski123",
                            PhoneNumber = "456736829",
                            PostalCode = "00-000",
                            Street = "Długa",
                            Surname = "Kowalski",
                            HireDate = new DateTime(2023, 5, 11, 23, 41, 52, 417, DateTimeKind.Local).AddTicks(2555)
                        },
                        new
                        {
                            UserId = 2,
                            AccountCreationDate = new DateTime(2023, 5, 16, 23, 41, 52, 417, DateTimeKind.Local).AddTicks(2557),
                            City = "Gdańsk",
                            Email = "katarzyna.nowak@gmail.com",
                            Flat = 3,
                            LastLoginDate = new DateTime(2023, 5, 20, 23, 41, 52, 417, DateTimeKind.Local).AddTicks(2559),
                            Name = "Katarzyna",
                            Number = 10,
                            Password = "knowak123",
                            PhoneNumber = "512345678",
                            PostalCode = "80-000",
                            Street = "Kwiatowa",
                            Surname = "Nowak",
                            HireDate = new DateTime(2023, 5, 16, 23, 41, 52, 417, DateTimeKind.Local).AddTicks(2560)
                        },
                        new
                        {
                            UserId = 3,
                            AccountCreationDate = new DateTime(2023, 5, 14, 23, 41, 52, 417, DateTimeKind.Local).AddTicks(2563),
                            City = "Kraków",
                            Email = "adam.kowalczyk@gmail.com",
                            Flat = 6,
                            LastLoginDate = new DateTime(2023, 5, 19, 23, 41, 52, 417, DateTimeKind.Local).AddTicks(2564),
                            Name = "Adam",
                            Number = 20,
                            Password = "akowalczyk789",
                            PhoneNumber = "601234567",
                            PostalCode = "30-001",
                            Street = "Słoneczna",
                            Surname = "Kowalczyk",
                            HireDate = new DateTime(2023, 5, 14, 23, 41, 52, 417, DateTimeKind.Local).AddTicks(2566)
                        },
                        new
                        {
                            UserId = 4,
                            AccountCreationDate = new DateTime(2023, 5, 18, 23, 41, 52, 417, DateTimeKind.Local).AddTicks(2567),
                            City = "Warszawa",
                            Email = "magdalena.wojcik@gmail.com",
                            Flat = 2,
                            LastLoginDate = new DateTime(2023, 5, 20, 23, 41, 52, 417, DateTimeKind.Local).AddTicks(2569),
                            Name = "Magdalena",
                            Number = 15,
                            Password = "mwojcik456",
                            PhoneNumber = "712345678",
                            PostalCode = "02-000",
                            Street = "Ogrodowa",
                            Surname = "Wójcik",
                            HireDate = new DateTime(2023, 5, 18, 23, 41, 52, 417, DateTimeKind.Local).AddTicks(2570)
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Student", b =>
                {
                    b.HasBaseType("Flats4us.Entities.User");

                    b.Property<bool>("ActivityStatus")
                        .HasColumnType("bit");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DocumentExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.Seeker", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Student");

                    b.HasDiscriminator().HasValue("Seeker");

                    b.HasData(
                        new
                        {
                            UserId = 5,
                            AccountCreationDate = new DateTime(2023, 5, 11, 23, 41, 52, 418, DateTimeKind.Local).AddTicks(7316),
                            City = "Warszawa",
                            Email = "maciej.kowalski@gmail.com",
                            Flat = 2,
                            LastLoginDate = new DateTime(2023, 5, 21, 23, 41, 52, 418, DateTimeKind.Local).AddTicks(7331),
                            Name = "Maciej",
                            Number = 47,
                            Password = "mkowalski123",
                            PhoneNumber = "456736829",
                            PostalCode = "00-000",
                            Street = "Długa",
                            Surname = "Kowalski",
                            ActivityStatus = false,
                            Age = 22,
                            DocumentExpireDate = new DateTime(2024, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "/documents/1",
                            DocumentType = 0,
                            Facebook = "",
                            Instagram = "",
                            PhotoPath = "/profile/1",
                            StudentNumber = "s22523",
                            Twitter = "",
                            University = "PJATK",
                            VerificationStatus = 0,
                            YearOfBirth = 2001
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.SurveyStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithOne("SurveyStudent")
                        .HasForeignKey("Flats4us.Entities.SurveyStudent", "SurveyStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.Student", b =>
                {
                    b.Navigation("SurveyStudent")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
