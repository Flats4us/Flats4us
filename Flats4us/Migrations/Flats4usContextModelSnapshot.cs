// <auto-generated />
using System;
using Flats4us.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flats4us.Migrations
{
    [DbContext(typeof(Flats4usContext))]
    partial class Flats4usContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EquipmentProperty", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("PropertiesPropertyId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId", "PropertiesPropertyId");

                    b.HasIndex("PropertiesPropertyId");

                    b.ToTable("EquipmentProperty", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertisementId"));

                    b.Property<string>("BannerPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("ModeratorUserId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("AdvertisementId");

                    b.HasIndex("ModeratorUserId");

                    b.ToTable("Advertisements", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.Argument", b =>
                {
                    b.Property<int>("ArgumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArgumentId"));

                    b.Property<int?>("ArgumentInterventionId")
                        .HasColumnType("int");

                    b.Property<int>("ArgumentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("MederatorDecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OwnerAcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StudentAcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("ArgumentId");

                    b.HasIndex("ArgumentInterventionId");

                    b.HasIndex("OfferId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Arguments", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.ArgumentIntervention", b =>
                {
                    b.Property<int>("ArgumentInterventionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArgumentInterventionId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModeratorUserId")
                        .HasColumnType("int");

                    b.HasKey("ArgumentInterventionId");

                    b.HasIndex("ModeratorUserId");

                    b.ToTable("ArgumentInterventions", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.ArgumentMessage", b =>
                {
                    b.Property<int>("ArgumentMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArgumentMessageId"));

                    b.Property<int>("ArgumentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sender")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArgumentMessageId");

                    b.HasIndex("ArgumentId");

                    b.ToTable("ArgumentMessages", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentId");

                    b.ToTable("Equipment", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.Interest", b =>
                {
                    b.Property<int>("InterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterestId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InterestId");

                    b.ToTable("Interests", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.Meeting", b =>
                {
                    b.Property<int>("MeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingId");

                    b.HasIndex("OfferId");

                    b.ToTable("Meetings", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfInterested")
                        .HasColumnType("int");

                    b.Property<int>("OfferStatus")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Regulations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentalPeriod")
                        .HasColumnType("int");

                    b.HasKey("OfferId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Offers", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.OfferInterest", b =>
                {
                    b.Property<int>("OfferInterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferInterestId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("SeekerUserId")
                        .HasColumnType("int");

                    b.HasKey("OfferInterestId");

                    b.HasIndex("OfferId");

                    b.HasIndex("SeekerUserId");

                    b.ToTable("OfferInterests", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.OfferPromotion", b =>
                {
                    b.Property<int>("OfferPromotionId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("PricePerDay")
                        .HasColumnType("int");

                    b.HasKey("OfferPromotionId");

                    b.ToTable("OfferPromotions", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionOwnerStudent", b =>
                {
                    b.Property<int>("OpinionOwnerStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpinionOwnerStudentId"));

                    b.Property<int>("Check1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("OpinionOwnerStudentId");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("OwnerStudentOpinions", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionRent", b =>
                {
                    b.Property<int>("OpinionRentId")
                        .HasColumnType("int");

                    b.Property<int>("ComplianceWithOffer")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Decoration")
                        .HasColumnType("int");

                    b.Property<int>("Equipment")
                        .HasColumnType("int");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<int>("Neighbors")
                        .HasColumnType("int");

                    b.Property<int>("Noisiness")
                        .HasColumnType("int");

                    b.Property<int>("ParkingSpace")
                        .HasColumnType("int");

                    b.Property<int>("Tidiness")
                        .HasColumnType("int");

                    b.HasKey("OpinionRentId");

                    b.ToTable("RentOpinions", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionStudentOwner", b =>
                {
                    b.Property<int>("OpinionOwnerStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpinionOwnerStudentId"));

                    b.Property<int>("Check1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("OpinionOwnerStudentId");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("StudentOwnerOpinions", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionStudentStudent", b =>
                {
                    b.Property<int>("OpinionStudentStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpinionStudentStudentId"));

                    b.Property<int>("Check1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("OpinionStudentStudentId");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("StudentStudentOpinions", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentPurpose")
                        .HasColumnType("int");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OfferId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"));

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Elevator")
                        .HasColumnType("bit");

                    b.Property<int>("Flat")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfInhabitants")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleDeedPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.HasKey("PropertyId");

                    b.ToTable("Properties", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Property");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Flats4us.Entities.Rent", b =>
                {
                    b.Property<int>("RentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentId"));

                    b.Property<string>("ContractInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OffersOfferId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TenantUserId")
                        .HasColumnType("int");

                    b.HasKey("RentId");

                    b.HasIndex("OffersOfferId");

                    b.HasIndex("TenantUserId");

                    b.ToTable("Rents", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.SurveyOwnerOffer", b =>
                {
                    b.Property<int>("SurveyOwnerOfferId")
                        .HasColumnType("int");

                    b.Property<bool>("Animals")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfInhabitants")
                        .HasColumnType("int");

                    b.Property<int>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Parties")
                        .HasColumnType("bit");

                    b.Property<bool>("Smoking")
                        .HasColumnType("bit");

                    b.HasKey("SurveyOwnerOfferId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("OwnerOfferSurveys", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.SurveyStudent", b =>
                {
                    b.Property<int>("SurveyStudentId")
                        .HasColumnType("int");

                    b.Property<bool>("Animals")
                        .HasColumnType("bit");

                    b.Property<bool>("LookingForRoommate")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfRoommates")
                        .HasColumnType("int");

                    b.Property<int>("MaxRoommateAge")
                        .HasColumnType("int");

                    b.Property<int>("MinRoommateAge")
                        .HasColumnType("int");

                    b.Property<int>("Party")
                        .HasColumnType("int");

                    b.Property<int>("RoommateGender")
                        .HasColumnType("int");

                    b.Property<bool>("Smoking")
                        .HasColumnType("bit");

                    b.Property<int>("Sociability")
                        .HasColumnType("int");

                    b.Property<int>("Tidiness")
                        .HasColumnType("int");

                    b.Property<bool>("Vegan")
                        .HasColumnType("bit");

                    b.HasKey("SurveyStudentId");

                    b.ToTable("StudentSurveys", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("AccountCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Flat")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("InterestStudent", b =>
                {
                    b.Property<int>("InterestsInterestId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsUserId")
                        .HasColumnType("int");

                    b.HasKey("InterestsInterestId", "StudentsUserId");

                    b.HasIndex("StudentsUserId");

                    b.ToTable("InterestStudent", (string)null);
                });

            modelBuilder.Entity("MeetingStudent", b =>
                {
                    b.Property<int>("MeetingsMeetingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsUserId")
                        .HasColumnType("int");

                    b.HasKey("MeetingsMeetingId", "StudentsUserId");

                    b.HasIndex("StudentsUserId");

                    b.ToTable("MeetingStudent", (string)null);
                });

            modelBuilder.Entity("Flats4us.Entities.Flat", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Property");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.ToTable("Properties", null, t =>
                        {
                            t.Property("NumberOfRooms")
                                .HasColumnName("Flat_NumberOfRooms");
                        });

                    b.HasDiscriminator().HasValue("Flat");
                });

            modelBuilder.Entity("Flats4us.Entities.House", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Property");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("PlotArea")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("House");
                });

            modelBuilder.Entity("Flats4us.Entities.Room", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Room");
                });

            modelBuilder.Entity("Flats4us.Entities.Moderator", b =>
                {
                    b.HasBaseType("Flats4us.Entities.User");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Moderator");
                });

            modelBuilder.Entity("Flats4us.Entities.OwnerStudent", b =>
                {
                    b.HasBaseType("Flats4us.Entities.User");

                    b.Property<bool>("ActivityStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DocumentExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("OwnerStudent");
                });

            modelBuilder.Entity("Flats4us.Entities.Owner", b =>
                {
                    b.HasBaseType("Flats4us.Entities.OwnerStudent");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Owner");
                });

            modelBuilder.Entity("Flats4us.Entities.Student", b =>
                {
                    b.HasBaseType("Flats4us.Entities.OwnerStudent");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.Seeker", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Student");

                    b.HasDiscriminator().HasValue("Seeker");
                });

            modelBuilder.Entity("Flats4us.Entities.Tenant", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Student");

                    b.Property<int>("RoommatesStatus")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Tenant");
                });

            modelBuilder.Entity("EquipmentProperty", b =>
                {
                    b.HasOne("Flats4us.Entities.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.Advertisement", b =>
                {
                    b.HasOne("Flats4us.Entities.Moderator", "Moderator")
                        .WithMany("Advertisements")
                        .HasForeignKey("ModeratorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Flats4us.Entities.Argument", b =>
                {
                    b.HasOne("Flats4us.Entities.ArgumentIntervention", "ArgumentIntervention")
                        .WithMany()
                        .HasForeignKey("ArgumentInterventionId");

                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany("Arguments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithMany("Arguments")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArgumentIntervention");

                    b.Navigation("Offer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.ArgumentIntervention", b =>
                {
                    b.HasOne("Flats4us.Entities.Moderator", "Moderator")
                        .WithMany("ArgumentInterventions")
                        .HasForeignKey("ModeratorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Flats4us.Entities.ArgumentMessage", b =>
                {
                    b.HasOne("Flats4us.Entities.Argument", "Argument")
                        .WithMany("ArgumentMessages")
                        .HasForeignKey("ArgumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Argument");
                });

            modelBuilder.Entity("Flats4us.Entities.Meeting", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", null)
                        .WithMany("Meetings")
                        .HasForeignKey("OfferId");
                });

            modelBuilder.Entity("Flats4us.Entities.Offer", b =>
                {
                    b.HasOne("Flats4us.Entities.Property", "Property")
                        .WithMany("Offers")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Flats4us.Entities.OfferInterest", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany("OfferInterests")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Seeker", "Seeker")
                        .WithMany("OfferInterests")
                        .HasForeignKey("SeekerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Seeker");
                });

            modelBuilder.Entity("Flats4us.Entities.OfferPromotion", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany("OfferPromotions")
                        .HasForeignKey("OfferPromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionOwnerStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Student", "Evaluated")
                        .WithMany("ReceivedOwnertStudentOpinions")
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Owner", "Evaluator")
                        .WithMany("IssuedOwnerStudentOpinions")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionRent", b =>
                {
                    b.HasOne("Flats4us.Entities.Rent", "Rent")
                        .WithOne("OpinionRent")
                        .HasForeignKey("Flats4us.Entities.OpinionRent", "OpinionRentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionStudentOwner", b =>
                {
                    b.HasOne("Flats4us.Entities.Owner", "Evaluated")
                        .WithMany("ReceivedStudentOwnerOpinions")
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Evaluator")
                        .WithMany("IssuedStudentOwnerOpinions")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionStudentStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Student", "Evaluated")
                        .WithMany("ReceivedStudentStudentOpinions")
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Evaluator")
                        .WithMany("IssuedStudentStudentOpinions")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Flats4us.Entities.Payment", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany("Payments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.Rent", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offers")
                        .WithMany("Rents")
                        .HasForeignKey("OffersOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Tenant", "Tenant")
                        .WithMany("Rents")
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offers");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Flats4us.Entities.SurveyOwnerOffer", b =>
                {
                    b.HasOne("Flats4us.Entities.Owner", "Owner")
                        .WithMany("OwnerOfferSurveys")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithOne("SurveyOwnerOffer")
                        .HasForeignKey("Flats4us.Entities.SurveyOwnerOffer", "SurveyOwnerOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Flats4us.Entities.SurveyStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithOne("SurveyStudent")
                        .HasForeignKey("Flats4us.Entities.SurveyStudent", "SurveyStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InterestStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Interest", null)
                        .WithMany()
                        .HasForeignKey("InterestsInterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Meeting", null)
                        .WithMany()
                        .HasForeignKey("MeetingsMeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.Argument", b =>
                {
                    b.Navigation("ArgumentMessages");
                });

            modelBuilder.Entity("Flats4us.Entities.Offer", b =>
                {
                    b.Navigation("Arguments");

                    b.Navigation("Meetings");

                    b.Navigation("OfferInterests");

                    b.Navigation("OfferPromotions");

                    b.Navigation("Payments");

                    b.Navigation("Rents");

                    b.Navigation("SurveyOwnerOffer")
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.Property", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Flats4us.Entities.Rent", b =>
                {
                    b.Navigation("OpinionRent")
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.Moderator", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("ArgumentInterventions");
                });

            modelBuilder.Entity("Flats4us.Entities.Owner", b =>
                {
                    b.Navigation("IssuedOwnerStudentOpinions");

                    b.Navigation("OwnerOfferSurveys");

                    b.Navigation("ReceivedStudentOwnerOpinions");
                });

            modelBuilder.Entity("Flats4us.Entities.Student", b =>
                {
                    b.Navigation("Arguments");

                    b.Navigation("IssuedStudentOwnerOpinions");

                    b.Navigation("IssuedStudentStudentOpinions");

                    b.Navigation("Payments");

                    b.Navigation("ReceivedOwnertStudentOpinions");

                    b.Navigation("ReceivedStudentStudentOpinions");

                    b.Navigation("SurveyStudent")
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.Seeker", b =>
                {
                    b.Navigation("OfferInterests");
                });

            modelBuilder.Entity("Flats4us.Entities.Tenant", b =>
                {
                    b.Navigation("Rents");
                });
#pragma warning restore 612, 618
        }
    }
}
