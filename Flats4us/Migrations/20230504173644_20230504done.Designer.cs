// <auto-generated />
using System;
using Flats4us.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flats4us.Migrations
{
    [DbContext(typeof(Flats4usContext))]
    [Migration("20230504173644_20230504done")]
    partial class _20230504done
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Flats4us.Entities.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ModeratorId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.ToTable("Advertisement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = new byte[] { 18, 52, 86, 120 },
                            ModeratorId = 1,
                            Price = 100
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = new byte[] { 18, 52, 86, 120 },
                            ModeratorId = 2,
                            Price = 250
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2023, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = new byte[] { 18, 52, 86, 120 },
                            ModeratorId = 3,
                            Price = 470
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Argument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArgumentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("InterventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModeratorDecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OwnerAcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TenantAcceptanceDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InterventionId");

                    b.HasIndex("OfferId");

                    b.ToTable("Argument");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArgumentStatus = 0,
                            InterventionId = 1,
                            ModeratorDecisionDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 1,
                            OwnerAcceptanceDate = new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantAcceptanceDate = new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ArgumentStatus = 1,
                            InterventionId = 2,
                            ModeratorDecisionDate = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 2,
                            OwnerAcceptanceDate = new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantAcceptanceDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ArgumentStatus = 3,
                            InterventionId = 3,
                            ModeratorDecisionDate = new DateTime(2023, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 3,
                            OwnerAcceptanceDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantAcceptanceDate = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.ArgumentMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArgumentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArgumentId");

                    b.HasIndex("SenderId");

                    b.ToTable("ArgumentMessage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "First argument message",
                            Date = new DateTime(2023, 5, 4, 19, 36, 44, 410, DateTimeKind.Local).AddTicks(2749),
                            SenderId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Second argument message",
                            Date = new DateTime(2023, 5, 3, 19, 36, 44, 410, DateTimeKind.Local).AddTicks(2803),
                            SenderId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Third argument message",
                            Date = new DateTime(2023, 5, 2, 19, 36, 44, 410, DateTimeKind.Local).AddTicks(2809),
                            SenderId = 3
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Projector"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Microphone"
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Intervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModeratorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.ToTable("Intervention");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intervention 1"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intervention 2"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intervention 3"
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.ToTable("Meeting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "First meeting address",
                            Date = new DateTime(2023, 5, 4, 19, 36, 44, 410, DateTimeKind.Local).AddTicks(2915),
                            OfferId = 1,
                            Reason = "First meeting reason"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Second meeting address",
                            Date = new DateTime(2023, 5, 5, 19, 36, 44, 410, DateTimeKind.Local).AddTicks(2920),
                            OfferId = 2,
                            Reason = "Second meeting reason"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Third meeting address",
                            Date = new DateTime(2023, 5, 6, 19, 36, 44, 410, DateTimeKind.Local).AddTicks(2924),
                            OfferId = 3,
                            Reason = "Third meeting reason"
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfIntrested")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Regulations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentalPeriod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Offer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 5, 4, 19, 36, 44, 410, DateTimeKind.Local).AddTicks(3000),
                            Description = "First offer",
                            NumberOfIntrested = 5,
                            Price = 1000,
                            PropertyId = 1,
                            Regulations = "First offer regulations",
                            RentalPeriod = 12
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 5, 3, 19, 36, 44, 410, DateTimeKind.Local).AddTicks(3005),
                            Description = "Second offer",
                            NumberOfIntrested = 10,
                            Price = 2000,
                            PropertyId = 2,
                            Regulations = "Second offer regulations",
                            RentalPeriod = 6
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2023, 5, 2, 19, 36, 44, 410, DateTimeKind.Local).AddTicks(3008),
                            Description = "Third offer",
                            NumberOfIntrested = 3,
                            Price = 1500,
                            PropertyId = 3,
                            Regulations = "Third offer regulations",
                            RentalPeriod = 9
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.OfferInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("SeekerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("SeekerId");

                    b.ToTable("OfferInterest");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 4, 29, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3044),
                            OfferId = 1,
                            SeekerId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 5, 2, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3046),
                            OfferId = 1,
                            SeekerId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2023, 5, 3, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3048),
                            OfferId = 2,
                            SeekerId = 3
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.OwnerOpinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Check1")
                        .HasColumnType("bit");

                    b.Property<bool>("Check2")
                        .HasColumnType("bit");

                    b.Property<bool>("Check3")
                        .HasColumnType("bit");

                    b.Property<bool>("Check4")
                        .HasColumnType("bit");

                    b.Property<bool>("Check5")
                        .HasColumnType("bit");

                    b.Property<bool>("Check6")
                        .HasColumnType("bit");

                    b.Property<bool>("Check7")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StudentId");

                    b.ToTable("OwnerOpinion");
                });

            modelBuilder.Entity("Flats4us.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("WhatFor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("StudentId");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OfferId = 1,
                            Price = 1500,
                            StudentId = 4,
                            WhatFor = 0
                        },
                        new
                        {
                            Id = 2,
                            OfferId = 2,
                            Price = 2000,
                            StudentId = 5,
                            WhatFor = 1
                        },
                        new
                        {
                            Id = 3,
                            OfferId = 1,
                            Price = 1200,
                            StudentId = 4,
                            WhatFor = 0
                        },
                        new
                        {
                            Id = 4,
                            OfferId = 2,
                            Price = 500,
                            StudentId = 5,
                            WhatFor = 2
                        },
                        new
                        {
                            Id = 5,
                            OfferId = 3,
                            Price = 1000,
                            StudentId = 6,
                            WhatFor = 0
                        },
                        new
                        {
                            Id = 6,
                            OfferId = 3,
                            Price = 1500,
                            StudentId = 6,
                            WhatFor = 1
                        },
                        new
                        {
                            Id = 7,
                            OfferId = 1,
                            Price = 1000,
                            StudentId = 4,
                            WhatFor = 0
                        },
                        new
                        {
                            Id = 8,
                            OfferId = 2,
                            Price = 500,
                            StudentId = 5,
                            WhatFor = 1
                        },
                        new
                        {
                            Id = 9,
                            OfferId = 1,
                            Price = 250,
                            StudentId = 4,
                            WhatFor = 2
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PromotionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.ToTable("Promotion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2023, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 1,
                            Price = 50,
                            PromotionType = 0,
                            StartDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 2,
                            Price = 75,
                            PromotionType = 1,
                            StartDate = new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2023, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 3,
                            Price = 100,
                            PromotionType = 0,
                            StartDate = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 1,
                            Price = 85,
                            PromotionType = 1,
                            StartDate = new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2023, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 2,
                            Price = 60,
                            PromotionType = 0,
                            StartDate = new DateTime(2023, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2023, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 3,
                            Price = 90,
                            PromotionType = 1,
                            StartDate = new DateTime(2023, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(2023, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 1,
                            Price = 120,
                            PromotionType = 0,
                            StartDate = new DateTime(2023, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            EndDate = new DateTime(2023, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 2,
                            Price = 70,
                            PromotionType = 1,
                            StartDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            EndDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 3,
                            Price = 95,
                            PromotionType = 0,
                            StartDate = new DateTime(2023, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            EndDate = new DateTime(2023, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 1,
                            Price = 80,
                            PromotionType = 1,
                            StartDate = new DateTime(2023, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxInhabitants")
                        .HasColumnType("int");

                    b.Property<int>("Surface")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Property");

                    b.HasDiscriminator<string>("Discriminator").IsComplete(true).HasValue("Property");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1111,
                            Address = "ul. Wiejska 1, Warszawa",
                            MaxInhabitants = 2,
                            Surface = 70
                        },
                        new
                        {
                            Id = 2111,
                            Address = "ul. Wrocławska 12, Kraków",
                            MaxInhabitants = 4,
                            Surface = 120
                        },
                        new
                        {
                            Id = 3111,
                            Address = "ul. Kościuszki 50, Gdańsk",
                            MaxInhabitants = 3,
                            Surface = 90
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.PropertyEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyEquipment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EquipmentId = 1,
                            PropertyId = 1
                        },
                        new
                        {
                            Id = 2,
                            EquipmentId = 2,
                            PropertyId = 2
                        },
                        new
                        {
                            Id = 3,
                            EquipmentId = 3,
                            PropertyId = 3
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "images/livingroom.jpg",
                            PropertyId = 1111,
                            Title = "Living room"
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "images/kitchen.jpg",
                            PropertyId = 2111,
                            Title = "Kitchen"
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "images/bedroom.jpg",
                            PropertyId = 3111,
                            Title = "Bedroom"
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContractInformations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LengthInMonths")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("TenantId");

                    b.ToTable("Rent");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContractInformations = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                            LengthInMonths = 12,
                            OfferId = 1,
                            StartDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = 1
                        },
                        new
                        {
                            Id = 2,
                            ContractInformations = "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
                            LengthInMonths = 6,
                            OfferId = 2,
                            StartDate = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = 2
                        },
                        new
                        {
                            Id = 3,
                            ContractInformations = "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            LengthInMonths = 3,
                            OfferId = 3,
                            StartDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = 3
                        },
                        new
                        {
                            Id = 4,
                            ContractInformations = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
                            LengthInMonths = 9,
                            OfferId = 1,
                            StartDate = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = 1
                        },
                        new
                        {
                            Id = 5,
                            ContractInformations = "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            LengthInMonths = 12,
                            OfferId = 2,
                            StartDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = 2
                        },
                        new
                        {
                            Id = 6,
                            ContractInformations = "Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.",
                            LengthInMonths = 6,
                            OfferId = 3,
                            StartDate = new DateTime(2022, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = 3
                        },
                        new
                        {
                            Id = 7,
                            ContractInformations = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium.",
                            LengthInMonths = 3,
                            OfferId = 1,
                            StartDate = new DateTime(2022, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = 1
                        },
                        new
                        {
                            Id = 8,
                            ContractInformations = "Totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            LengthInMonths = 9,
                            OfferId = 2,
                            StartDate = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = 2
                        },
                        new
                        {
                            Id = 9,
                            ContractInformations = "Totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            LengthInMonths = 9,
                            OfferId = 3,
                            StartDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = 3
                        },
                        new
                        {
                            Id = 10,
                            ContractInformations = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
                            LengthInMonths = 9,
                            OfferId = 1,
                            StartDate = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = 1
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.RentOpinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ComplianceWithOffer")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Decoration")
                        .HasColumnType("int");

                    b.Property<int>("Equipment")
                        .HasColumnType("int");

                    b.Property<int>("Localization")
                        .HasColumnType("int");

                    b.Property<int>("Loudness")
                        .HasColumnType("int");

                    b.Property<int>("Neighbors")
                        .HasColumnType("int");

                    b.Property<int>("ParkingPlace")
                        .HasColumnType("int");

                    b.Property<int>("Tidiness")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RentOpinion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComplianceWithOffer = 8,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Decoration = 7,
                            Equipment = 9,
                            Localization = 8,
                            Loudness = 4,
                            Neighbors = 7,
                            ParkingPlace = 6,
                            Tidiness = 9
                        },
                        new
                        {
                            Id = 2,
                            ComplianceWithOffer = 9,
                            Date = new DateTime(2022, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Decoration = 6,
                            Equipment = 8,
                            Localization = 7,
                            Loudness = 5,
                            Neighbors = 6,
                            ParkingPlace = 5,
                            Tidiness = 8
                        },
                        new
                        {
                            Id = 3,
                            ComplianceWithOffer = 7,
                            Date = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Decoration = 7,
                            Equipment = 7,
                            Localization = 9,
                            Loudness = 6,
                            Neighbors = 8,
                            ParkingPlace = 8,
                            Tidiness = 7
                        },
                        new
                        {
                            Id = 4,
                            ComplianceWithOffer = 8,
                            Date = new DateTime(2022, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Decoration = 5,
                            Equipment = 6,
                            Localization = 6,
                            Loudness = 7,
                            Neighbors = 7,
                            ParkingPlace = 4,
                            Tidiness = 6
                        },
                        new
                        {
                            Id = 5,
                            ComplianceWithOffer = 8,
                            Date = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Decoration = 7,
                            Equipment = 7,
                            Localization = 8,
                            Loudness = 3,
                            Neighbors = 9,
                            ParkingPlace = 8,
                            Tidiness = 9
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.StudentMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentMeeting");
                });

            modelBuilder.Entity("Flats4us.Entities.StudentOpinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Check1")
                        .HasColumnType("bit");

                    b.Property<bool>("Check2")
                        .HasColumnType("bit");

                    b.Property<bool>("Check3")
                        .HasColumnType("bit");

                    b.Property<bool>("Check4")
                        .HasColumnType("bit");

                    b.Property<bool>("Check5")
                        .HasColumnType("bit");

                    b.Property<bool>("Check6")
                        .HasColumnType("bit");

                    b.Property<bool>("Check7")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentOpinion");
                });

            modelBuilder.Entity("Flats4us.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Animal")
                        .HasColumnType("bit");

                    b.Property<int>("Helpfulness")
                        .HasColumnType("int");

                    b.Property<int>("Loudness")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfRoommates")
                        .HasColumnType("int");

                    b.Property<int>("MaxRoommateAge")
                        .HasColumnType("int");

                    b.Property<int>("MinRoommateAge")
                        .HasColumnType("int");

                    b.Property<int>("Party")
                        .HasColumnType("int");

                    b.Property<bool>("Roommate")
                        .HasColumnType("bit");

                    b.Property<int>("RoommateGender")
                        .HasColumnType("int");

                    b.Property<bool>("Smoking")
                        .HasColumnType("bit");

                    b.Property<int>("Sociability")
                        .HasColumnType("int");

                    b.Property<int>("Tidiness")
                        .HasColumnType("int");

                    b.Property<bool>("Vegan")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Survey");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Animal = false,
                            Helpfulness = 6,
                            Loudness = 4,
                            MaxNumberOfRoommates = 2,
                            MaxRoommateAge = 25,
                            MinRoommateAge = 20,
                            Party = 8,
                            Roommate = true,
                            RoommateGender = 1,
                            Smoking = false,
                            Sociability = 7,
                            Tidiness = 9,
                            Vegan = true
                        },
                        new
                        {
                            Id = 2,
                            Animal = false,
                            Helpfulness = 9,
                            Loudness = 7,
                            MaxNumberOfRoommates = 1,
                            MaxRoommateAge = 30,
                            MinRoommateAge = 22,
                            Party = 5,
                            Roommate = false,
                            RoommateGender = 0,
                            Smoking = true,
                            Sociability = 8,
                            Tidiness = 6,
                            Vegan = false
                        },
                        new
                        {
                            Id = 3,
                            Animal = true,
                            Helpfulness = 7,
                            Loudness = 3,
                            MaxNumberOfRoommates = 3,
                            MaxRoommateAge = 25,
                            MinRoommateAge = 18,
                            Party = 9,
                            Roommate = true,
                            RoommateGender = 2,
                            Smoking = false,
                            Sociability = 6,
                            Tidiness = 8,
                            Vegan = false
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccountCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Flats4us.Entities.Flat", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Property");

                    b.Property<int>("NumberOfRooms")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("NumberOfRooms");

                    b.ToTable("Property");

                    b.HasDiscriminator().HasValue("Flat");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ul. Wiejska 1, Warszawa",
                            MaxInhabitants = 2,
                            Surface = 70,
                            NumberOfRooms = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "ul. Wrocławska 12, Kraków",
                            MaxInhabitants = 4,
                            Surface = 120,
                            NumberOfRooms = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "ul. Kościuszki 50, Gdańsk",
                            MaxInhabitants = 3,
                            Surface = 90,
                            NumberOfRooms = 1
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.House", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Property");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("NumberOfRooms");

                    b.Property<int>("ParcelSurface")
                        .HasColumnType("int");

                    b.ToTable("Property");

                    b.HasDiscriminator().HasValue("House");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Address = "ul. Mickiewicza 20, Kraków",
                            MaxInhabitants = 6,
                            Surface = 150,
                            NumberOfFloors = 2,
                            NumberOfRooms = 5,
                            ParcelSurface = 500
                        },
                        new
                        {
                            Id = 5,
                            Address = "ul. Długa 15, Gdańsk",
                            MaxInhabitants = 4,
                            Surface = 100,
                            NumberOfFloors = 1,
                            NumberOfRooms = 4,
                            ParcelSurface = 300
                        },
                        new
                        {
                            Id = 6,
                            Address = "ul. Jagiellońska 10, Warszawa",
                            MaxInhabitants = 8,
                            Surface = 200,
                            NumberOfFloors = 3,
                            NumberOfRooms = 6,
                            ParcelSurface = 700
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Room", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Property");

                    b.HasDiscriminator().HasValue("Room");

                    b.HasData(
                        new
                        {
                            Id = 821111,
                            Address = "ul. Wiejska 1, Warszawa",
                            MaxInhabitants = 2,
                            Surface = 70,
                            Name = "Największy"
                        },
                        new
                        {
                            Id = 821112,
                            Address = "ul. Wrocławska 12, Kraków",
                            MaxInhabitants = 4,
                            Surface = 120,
                            Name = "Najmniejszy"
                        },
                        new
                        {
                            Id = 821113,
                            Address = "ul. Kościuszki 50, Gdańsk",
                            MaxInhabitants = 3,
                            Surface = 90,
                            Name = "Najśredniejszy"
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Moderator", b =>
                {
                    b.HasBaseType("Flats4us.Entities.User");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Moderator");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountCreationDate = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Address = "123 Main St",
                            City = "New York",
                            Email = "john.doe@example.com",
                            LastLoginDate = new DateTime(2023, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "John",
                            Password = "password123",
                            PhoneNumber = "555-1234",
                            Surname = "Doe",
                            Department = 0,
                            HireDate = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AccountCreationDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Address = "456 Park Ave",
                            City = "Los Angeles",
                            Email = "jane.smith@example.com",
                            LastLoginDate = new DateTime(2023, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jane",
                            Password = "password456",
                            PhoneNumber = "555-5678",
                            Surname = "Smith",
                            Department = 1,
                            HireDate = new DateTime(2023, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AccountCreationDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Address = "789 5th Ave",
                            City = "Chicago",
                            Email = "bob.johnson@example.com",
                            LastLoginDate = new DateTime(2023, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bob",
                            Password = "password789",
                            PhoneNumber = "555-9012",
                            Surname = "Johnson",
                            Department = 0,
                            HireDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.OwnerStudent", b =>
                {
                    b.HasBaseType("Flats4us.Entities.User");

                    b.Property<bool>("ActivityStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DocumentExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("OwnerStudent");
                });

            modelBuilder.Entity("Flats4us.Entities.Owner", b =>
                {
                    b.HasBaseType("Flats4us.Entities.OwnerStudent");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleDeedPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Owner");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            AccountCreationDate = new DateTime(2023, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Address = "ul. Kolorowa 12",
                            City = "Warszawa",
                            Email = "jan.kowalski@example.com",
                            LastLoginDate = new DateTime(2023, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jan",
                            Password = "password123",
                            PhoneNumber = "123456789",
                            Surname = "Kowalski",
                            ActivityStatus = true,
                            DocumentExpireDate = new DateTime(2028, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "/documents/id_card.pdf",
                            DocumentType = 0,
                            PhotoPath = "/photos/jan_kowalski.jpg",
                            VerificationStatus = 0,
                            BankAccount = "12345678901234567890123456",
                            TitleDeedPath = "/documents/title_deed.pdf"
                        },
                        new
                        {
                            Id = 11,
                            AccountCreationDate = new DateTime(2023, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Address = "ul. Zielona 34",
                            City = "Kraków",
                            Email = "anna.nowak@example.com",
                            LastLoginDate = new DateTime(2023, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Anna",
                            Password = "password456",
                            PhoneNumber = "987654321",
                            Surname = "Nowak",
                            ActivityStatus = false,
                            DocumentExpireDate = new DateTime(2027, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "/documents/passport.pdf",
                            DocumentType = 2,
                            PhotoPath = "/photos/anna_nowak.jpg",
                            VerificationStatus = 1,
                            BankAccount = "09876543210987654321098765",
                            TitleDeedPath = "/documents/title_deed.pdf"
                        },
                        new
                        {
                            Id = 12,
                            AccountCreationDate = new DateTime(2023, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Address = "ul. Czerwona 56",
                            City = "Wrocław",
                            Email = "piotr.wojcik@example.com",
                            LastLoginDate = new DateTime(2023, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Piotr",
                            Password = "password789",
                            PhoneNumber = "555666777",
                            Surname = "Wójcik",
                            ActivityStatus = true,
                            DocumentExpireDate = new DateTime(2024, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "/documents/student_card.pdf",
                            DocumentType = 1,
                            PhotoPath = "/photos/piotr_wojcik.jpg",
                            VerificationStatus = 0,
                            BankAccount = "11122233344455566677788899",
                            TitleDeedPath = "/documents/title_deed.pdf"
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Student", b =>
                {
                    b.HasBaseType("Flats4us.Entities.OwnerStudent");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("RentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasIndex("RentId");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.Seeker", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Student");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Seeker");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            AccountCreationDate = new DateTime(2023, 4, 4, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3364),
                            Address = "123 Main St",
                            City = "New York",
                            Email = "alice.smith@example.com",
                            LastLoginDate = new DateTime(2023, 5, 3, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3365),
                            Name = "Alice",
                            Password = "password123",
                            PhoneNumber = "555-1234",
                            Surname = "Smith",
                            ActivityStatus = true,
                            DocumentExpireDate = new DateTime(2024, 5, 4, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3365),
                            DocumentPath = "/path/to/document.pdf",
                            DocumentType = 1,
                            PhotoPath = "/path/to/photo.jpg",
                            VerificationStatus = 0,
                            Age = 23,
                            StudentNumber = "123456",
                            YearOfBirth = 2000
                        },
                        new
                        {
                            Id = 8,
                            AccountCreationDate = new DateTime(2023, 3, 5, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3370),
                            Address = "456 Elm St",
                            City = "Los Angeles",
                            Email = "bob.jones@example.com",
                            LastLoginDate = new DateTime(2023, 4, 24, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3371),
                            Name = "Bob",
                            Password = "password456",
                            PhoneNumber = "555-5678",
                            Surname = "Jones",
                            ActivityStatus = true,
                            DocumentExpireDate = new DateTime(2025, 5, 4, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3372),
                            DocumentPath = "/path/to/document2.pdf",
                            DocumentType = 1,
                            PhotoPath = "/path/to/photo2.jpg",
                            VerificationStatus = 0,
                            Age = 28,
                            StudentNumber = "789012",
                            YearOfBirth = 1995
                        },
                        new
                        {
                            Id = 9,
                            AccountCreationDate = new DateTime(2023, 4, 19, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3373),
                            Address = "789 Oak St",
                            City = "Chicago",
                            Email = "carol.johnson@example.com",
                            LastLoginDate = new DateTime(2023, 5, 2, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3374),
                            Name = "Carol",
                            Password = "password789",
                            PhoneNumber = "555-9012",
                            Surname = "Johnson",
                            ActivityStatus = true,
                            DocumentExpireDate = new DateTime(2028, 5, 4, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3375),
                            DocumentPath = "/path/to/document3.pdf",
                            DocumentType = 2,
                            PhotoPath = "/path/to/photo3.jpg",
                            VerificationStatus = 0,
                            Age = 25,
                            StudentNumber = "345678",
                            YearOfBirth = 1998
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Tenant", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Student");

                    b.Property<int>("RoommatesStatus")
                        .HasColumnType("int");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Tenant");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            AccountCreationDate = new DateTime(2023, 4, 4, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3425),
                            Address = "123 Main St",
                            City = "New York",
                            Email = "alice.smith@example.com",
                            LastLoginDate = new DateTime(2023, 5, 3, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3426),
                            Name = "Alice",
                            Password = "password123",
                            PhoneNumber = "555-1234",
                            Surname = "Smith",
                            ActivityStatus = true,
                            DocumentExpireDate = new DateTime(2024, 5, 4, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3427),
                            DocumentPath = "/path/to/document.pdf",
                            DocumentType = 1,
                            PhotoPath = "/path/to/photo.jpg",
                            VerificationStatus = 0,
                            Age = 23,
                            StudentNumber = "123456",
                            YearOfBirth = 2000,
                            RoommatesStatus = 1
                        },
                        new
                        {
                            Id = 5,
                            AccountCreationDate = new DateTime(2023, 4, 4, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3429),
                            Address = "456 Oak St",
                            City = "San Francisco",
                            Email = "bob.johnson@example.com",
                            LastLoginDate = new DateTime(2023, 5, 3, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3430),
                            Name = "Bob",
                            Password = "password456",
                            PhoneNumber = "555-5678",
                            Surname = "Johnson",
                            ActivityStatus = true,
                            DocumentExpireDate = new DateTime(2024, 5, 4, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3431),
                            DocumentPath = "/path/to/document.pdf",
                            DocumentType = 0,
                            PhotoPath = "/path/to/photo.jpg",
                            VerificationStatus = 0,
                            Age = 22,
                            StudentNumber = "654321",
                            YearOfBirth = 2001,
                            RoommatesStatus = 0
                        },
                        new
                        {
                            Id = 6,
                            AccountCreationDate = new DateTime(2023, 4, 4, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3432),
                            Address = "789 Maple Ave",
                            City = "Chicago",
                            Email = "charlie.brown@example.com",
                            LastLoginDate = new DateTime(2023, 5, 3, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3433),
                            Name = "Charlie",
                            Password = "password789",
                            PhoneNumber = "555-9012",
                            Surname = "Brown",
                            ActivityStatus = true,
                            DocumentExpireDate = new DateTime(2024, 5, 4, 17, 36, 44, 410, DateTimeKind.Utc).AddTicks(3434),
                            DocumentPath = "/path/to/document.pdf",
                            DocumentType = 2,
                            PhotoPath = "/path/to/photo.jpg",
                            VerificationStatus = 1,
                            Age = 24,
                            StudentNumber = "789012",
                            YearOfBirth = 1999,
                            RoommatesStatus = 0
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Advertisement", b =>
                {
                    b.HasOne("Flats4us.Entities.Moderator", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Flats4us.Entities.Argument", b =>
                {
                    b.HasOne("Flats4us.Entities.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId");

                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intervention");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Flats4us.Entities.ArgumentMessage", b =>
                {
                    b.HasOne("Flats4us.Entities.Argument", null)
                        .WithMany("ArgumentMessages")
                        .HasForeignKey("ArgumentId");

                    b.HasOne("Flats4us.Entities.OwnerStudent", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Flats4us.Entities.Intervention", b =>
                {
                    b.HasOne("Flats4us.Entities.Moderator", null)
                        .WithMany("Interventions")
                        .HasForeignKey("ModeratorId");
                });

            modelBuilder.Entity("Flats4us.Entities.Meeting", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany("Meetings")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Flats4us.Entities.Offer", b =>
                {
                    b.HasOne("Flats4us.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Flats4us.Entities.OfferInterest", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Seeker", "Seeker")
                        .WithMany()
                        .HasForeignKey("SeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Seeker");
                });

            modelBuilder.Entity("Flats4us.Entities.OwnerOpinion", b =>
                {
                    b.HasOne("Flats4us.Entities.Owner", "Evaluated")
                        .WithMany()
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Evaluator")
                        .WithMany()
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Owner", null)
                        .WithMany("IssuedRatings")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Flats4us.Entities.Student", null)
                        .WithMany("IssuedRatings")
                        .HasForeignKey("StudentId");

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Flats4us.Entities.Payment", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany("Payments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.Promotion", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany("Promotions")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Flats4us.Entities.PropertyEquipment", b =>
                {
                    b.HasOne("Flats4us.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Property", "Property")
                        .WithMany("PropertyEquipments")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Flats4us.Entities.PropertyImage", b =>
                {
                    b.HasOne("Flats4us.Entities.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Flats4us.Entities.Rent", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany("Rentals")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Tenant", "Tenant")
                        .WithMany("Rents")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Flats4us.Entities.RentOpinion", b =>
                {
                    b.HasOne("Flats4us.Entities.Rent", "Rent")
                        .WithOne("RentOpinion")
                        .HasForeignKey("Flats4us.Entities.RentOpinion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Flats4us.Entities.StudentMeeting", b =>
                {
                    b.HasOne("Flats4us.Entities.Meeting", "Meeting")
                        .WithMany()
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.StudentOpinion", b =>
                {
                    b.HasOne("Flats4us.Entities.Student", "Evaluated")
                        .WithMany()
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Owner", "Evaluator")
                        .WithMany()
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Owner", null)
                        .WithMany("ReceivedRatings")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Flats4us.Entities.Student", null)
                        .WithMany("ReceivedRatings")
                        .HasForeignKey("StudentId");

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Flats4us.Entities.Survey", b =>
                {
                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithOne("Survey")
                        .HasForeignKey("Flats4us.Entities.Survey", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.Student", b =>
                {
                    b.HasOne("Flats4us.Entities.Rent", null)
                        .WithMany("OtherTenants")
                        .HasForeignKey("RentId");
                });

            modelBuilder.Entity("Flats4us.Entities.Argument", b =>
                {
                    b.Navigation("ArgumentMessages");
                });

            modelBuilder.Entity("Flats4us.Entities.Offer", b =>
                {
                    b.Navigation("Meetings");

                    b.Navigation("Payments");

                    b.Navigation("Promotions");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("Flats4us.Entities.Property", b =>
                {
                    b.Navigation("PropertyEquipments");

                    b.Navigation("PropertyImages");
                });

            modelBuilder.Entity("Flats4us.Entities.Rent", b =>
                {
                    b.Navigation("OtherTenants");

                    b.Navigation("RentOpinion")
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.Moderator", b =>
                {
                    b.Navigation("Interventions");
                });

            modelBuilder.Entity("Flats4us.Entities.Owner", b =>
                {
                    b.Navigation("IssuedRatings");

                    b.Navigation("ReceivedRatings");
                });

            modelBuilder.Entity("Flats4us.Entities.Student", b =>
                {
                    b.Navigation("IssuedRatings");

                    b.Navigation("Payments");

                    b.Navigation("ReceivedRatings");

                    b.Navigation("Survey")
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.Tenant", b =>
                {
                    b.Navigation("Rents");
                });
#pragma warning restore 612, 618
        }
    }
}
