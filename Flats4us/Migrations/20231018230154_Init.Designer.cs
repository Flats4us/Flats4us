// <auto-generated />
using System;
using Flats4us.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flats4us.Migrations
{
    [DbContext(typeof(Flats4usContext))]
    [Migration("20231018230154_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EquipmentProperty", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("PropertiesPropertyId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId", "PropertiesPropertyId");

                    b.HasIndex("PropertiesPropertyId");

                    b.ToTable("EquipmentProperty");
                });

            modelBuilder.Entity("Flats4us.Entities.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertisementId"));

                    b.Property<string>("BannerPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("ModeratorUserId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("AdvertisementId");

                    b.HasIndex("ModeratorUserId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("Flats4us.Entities.Argument", b =>
                {
                    b.Property<int>("ArgumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArgumentId"));

                    b.Property<int?>("ArgumentInterventionId")
                        .HasColumnType("int");

                    b.Property<int>("ArgumentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("MederatorDecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OwnerAcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StudentAcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("ArgumentId");

                    b.HasIndex("ArgumentInterventionId");

                    b.HasIndex("OfferId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Arguments");
                });

            modelBuilder.Entity("Flats4us.Entities.ArgumentIntervention", b =>
                {
                    b.Property<int>("ArgumentInterventionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArgumentInterventionId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModeratorUserId")
                        .HasColumnType("int");

                    b.HasKey("ArgumentInterventionId");

                    b.HasIndex("ModeratorUserId");

                    b.ToTable("ArgumentInterventions");
                });

            modelBuilder.Entity("Flats4us.Entities.ArgumentMessage", b =>
                {
                    b.Property<int>("ArgumentMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArgumentMessageId"));

                    b.Property<int>("ArgumentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sender")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArgumentMessageId");

                    b.HasIndex("ArgumentId");

                    b.ToTable("ArgumentMessages");
                });

            modelBuilder.Entity("Flats4us.Entities.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ChatId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StudentId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Flats4us.Entities.ChatMessage", b =>
                {
                    b.Property<int>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatMessageId"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sender")
                        .HasColumnType("int");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Flats4us.Entities.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("Flats4us.Entities.Interest", b =>
                {
                    b.Property<int>("InterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterestId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InterestId");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("Flats4us.Entities.Meeting", b =>
                {
                    b.Property<int>("MeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingId");

                    b.HasIndex("OfferId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Flats4us.Entities.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfInterested")
                        .HasColumnType("int");

                    b.Property<int>("OfferStatus")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Regulations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentalPeriod")
                        .HasColumnType("int");

                    b.HasKey("OfferId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Flats4us.Entities.OfferInterest", b =>
                {
                    b.Property<int>("OfferInterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferInterestId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("OfferInterestId");

                    b.HasIndex("OfferId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("OfferInterests");
                });

            modelBuilder.Entity("Flats4us.Entities.OfferPromotion", b =>
                {
                    b.Property<int>("OfferPromotionId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("PricePerDay")
                        .HasColumnType("int");

                    b.HasKey("OfferPromotionId");

                    b.ToTable("OfferPromotions");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionOwnerStudent", b =>
                {
                    b.Property<int>("OpinionOwnerStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpinionOwnerStudentId"));

                    b.Property<int>("Check1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("OpinionOwnerStudentId");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("OwnerStudentOpinions");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionRent", b =>
                {
                    b.Property<int>("OpinionRentId")
                        .HasColumnType("int");

                    b.Property<int>("ComplianceWithOffer")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Decoration")
                        .HasColumnType("int");

                    b.Property<int>("Equipment")
                        .HasColumnType("int");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<int>("Neighbors")
                        .HasColumnType("int");

                    b.Property<int>("Noisiness")
                        .HasColumnType("int");

                    b.Property<int>("ParkingSpace")
                        .HasColumnType("int");

                    b.Property<int>("Tidiness")
                        .HasColumnType("int");

                    b.HasKey("OpinionRentId");

                    b.ToTable("RentOpinions");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionStudentOwner", b =>
                {
                    b.Property<int>("OpinionOwnerStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpinionOwnerStudentId"));

                    b.Property<int>("Check1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("OpinionOwnerStudentId");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("StudentOwnerOpinions");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionStudentStudent", b =>
                {
                    b.Property<int>("OpinionStudentStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpinionStudentStudentId"));

                    b.Property<int>("Check1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("OpinionStudentStudentId");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("StudentStudentOpinions");
                });

            modelBuilder.Entity("Flats4us.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentPurpose")
                        .HasColumnType("int");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OfferId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Flats4us.Entities.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"));

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Flat")
                        .HasColumnType("int");

                    b.Property<string>("ImagesPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxNumberOfInhabitants")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.HasKey("PropertyId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Properties");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Property");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Flats4us.Entities.Rent", b =>
                {
                    b.Property<int>("RentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentId"));

                    b.Property<string>("ContractInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OffersOfferId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("RentId");

                    b.HasIndex("OffersOfferId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("Flats4us.Entities.SurveyOwnerOffer", b =>
                {
                    b.Property<int>("SurveyOwnerOfferId")
                        .HasColumnType("int");

                    b.Property<bool>("Animals")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfInhabitants")
                        .HasColumnType("int");

                    b.Property<int>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Parties")
                        .HasColumnType("bit");

                    b.Property<bool>("Smoking")
                        .HasColumnType("bit");

                    b.HasKey("SurveyOwnerOfferId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("OwnerOfferSurveys");
                });

            modelBuilder.Entity("Flats4us.Entities.SurveyStudent", b =>
                {
                    b.Property<int>("SurveyStudentId")
                        .HasColumnType("int");

                    b.Property<bool>("Animals")
                        .HasColumnType("bit");

                    b.Property<bool>("LookingForRoommate")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfRoommates")
                        .HasColumnType("int");

                    b.Property<int>("MaxRoommateAge")
                        .HasColumnType("int");

                    b.Property<int>("MinRoommateAge")
                        .HasColumnType("int");

                    b.Property<int>("Party")
                        .HasColumnType("int");

                    b.Property<int>("RoommateGender")
                        .HasColumnType("int");

                    b.Property<bool>("Smoking")
                        .HasColumnType("bit");

                    b.Property<int>("Sociability")
                        .HasColumnType("int");

                    b.Property<int>("Tidiness")
                        .HasColumnType("int");

                    b.Property<bool>("Vegan")
                        .HasColumnType("bit");

                    b.HasKey("SurveyStudentId");

                    b.ToTable("StudentSurveys");
                });

            modelBuilder.Entity("Flats4us.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("AccountCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Flat")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("InterestStudent", b =>
                {
                    b.Property<int>("InterestsInterestId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsUserId")
                        .HasColumnType("int");

                    b.HasKey("InterestsInterestId", "StudentsUserId");

                    b.HasIndex("StudentsUserId");

                    b.ToTable("InterestStudent");
                });

            modelBuilder.Entity("MeetingStudent", b =>
                {
                    b.Property<int>("MeetingsMeetingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsUserId")
                        .HasColumnType("int");

                    b.HasKey("MeetingsMeetingId", "StudentsUserId");

                    b.HasIndex("StudentsUserId");

                    b.ToTable("MeetingStudent");
                });

            modelBuilder.Entity("Flats4us.Entities.Flat", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Property");

                    b.Property<bool>("Elevator")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("Elevator");

                    b.Property<int>("Floor")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Floor");

                    b.Property<int>("NumberOfRooms")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("NumberOfRooms");

                    b.HasDiscriminator().HasValue("Flat");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            Area = 40,
                            City = "Warszawa",
                            ConstructionYear = 2000,
                            District = "Wilanów",
                            Flat = 3,
                            ImagesPath = "e2c2baa7-3dd8-490f-8378-972cf167c004",
                            MaxNumberOfInhabitants = 2,
                            Number = "4",
                            OwnerId = 1,
                            PostalCode = "00-000",
                            Province = "Mazowieckie",
                            Street = "Radosna",
                            VerificationStatus = 0,
                            Elevator = false,
                            Floor = 2,
                            NumberOfRooms = 2
                        },
                        new
                        {
                            PropertyId = 2,
                            Area = 50,
                            City = "Warszawa",
                            ConstructionYear = 1995,
                            District = "Ursynów",
                            Flat = 1,
                            ImagesPath = "1bb1e30b-2c30-47a2-8047-220649fa5df8",
                            MaxNumberOfInhabitants = 2,
                            Number = "9",
                            OwnerId = 2,
                            PostalCode = "00-000",
                            Province = "Mazowieckie",
                            Street = "Lasek Brzozowy",
                            VerificationStatus = 0,
                            Elevator = true,
                            Floor = 4,
                            NumberOfRooms = 3
                        },
                        new
                        {
                            PropertyId = 3,
                            Area = 80,
                            City = "Warszawa",
                            ConstructionYear = 2010,
                            District = "Włochy",
                            Flat = 5,
                            ImagesPath = "988aae23-a539-43c5-a7a0-35ab823a40af",
                            MaxNumberOfInhabitants = 3,
                            Number = "2",
                            OwnerId = 3,
                            PostalCode = "00-000",
                            Province = "Mazowieckie",
                            Street = "Żegoty",
                            VerificationStatus = 0,
                            Elevator = true,
                            Floor = 3,
                            NumberOfRooms = 4
                        },
                        new
                        {
                            PropertyId = 4,
                            Area = 55,
                            City = "Warszawa",
                            ConstructionYear = 2002,
                            District = "Bielany",
                            Flat = 2,
                            ImagesPath = "796fe042-d1bd-46c5-a5f3-e24efe1373a3",
                            MaxNumberOfInhabitants = 2,
                            Number = "1",
                            OwnerId = 2,
                            PostalCode = "00-000",
                            Province = "Mazowieckie",
                            Street = "Biograficzna",
                            VerificationStatus = 0,
                            Elevator = true,
                            Floor = 5,
                            NumberOfRooms = 3
                        },
                        new
                        {
                            PropertyId = 5,
                            Area = 45,
                            City = "Warszawa",
                            ConstructionYear = 1998,
                            District = "Mokotów",
                            Flat = 1,
                            ImagesPath = "6bdfc44b-a0ef-4fd6-9ac4-09fa6f98e447",
                            MaxNumberOfInhabitants = 2,
                            Number = "18",
                            OwnerId = 1,
                            PostalCode = "00-000",
                            Province = "Mazowieckie",
                            Street = "Samochodowa",
                            VerificationStatus = 0,
                            Elevator = false,
                            Floor = 3,
                            NumberOfRooms = 2
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.House", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Property");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("NumberOfRooms");

                    b.Property<int>("PlotArea")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("House");
                });

            modelBuilder.Entity("Flats4us.Entities.Room", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Property");

                    b.Property<bool>("Elevator")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("Elevator");

                    b.Property<int>("Floor")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Floor");

                    b.HasDiscriminator().HasValue("Room");

                    b.HasData(
                        new
                        {
                            PropertyId = 6,
                            Area = 40,
                            City = "Warszawa",
                            ConstructionYear = 2000,
                            District = "Wilanów",
                            Flat = 3,
                            ImagesPath = "107d5997-dc99-48af-bd69-cc698a8649e6",
                            MaxNumberOfInhabitants = 2,
                            Number = "5b",
                            OwnerId = 1,
                            PostalCode = "00-000",
                            Province = "Małopolskie",
                            Street = "Świętej Urszuli Ledóchowskiej",
                            VerificationStatus = 0,
                            Elevator = false,
                            Floor = 2
                        },
                        new
                        {
                            PropertyId = 7,
                            Area = 50,
                            City = "Warszawa",
                            ConstructionYear = 1995,
                            District = "Targówek",
                            ImagesPath = "fdf28490-2de7-4b7c-85c1-c5bfe1003e24",
                            MaxNumberOfInhabitants = 2,
                            Number = "8",
                            OwnerId = 2,
                            PostalCode = "00-000",
                            Province = "Mazowieckie",
                            Street = "Muszyniecka",
                            VerificationStatus = 0,
                            Elevator = true,
                            Floor = 1
                        },
                        new
                        {
                            PropertyId = 8,
                            Area = 80,
                            City = "Warszawa",
                            ConstructionYear = 2010,
                            District = "Wawer",
                            Flat = 1,
                            ImagesPath = "8fe4e3d1-4096-4556-aba0-98969eac7203",
                            MaxNumberOfInhabitants = 3,
                            Number = "25",
                            OwnerId = 3,
                            PostalCode = "00-000",
                            Province = "Mazowieckie",
                            Street = "Gruntowa",
                            VerificationStatus = 0,
                            Elevator = true,
                            Floor = 3
                        },
                        new
                        {
                            PropertyId = 9,
                            Area = 55,
                            City = "Warszawa",
                            ConstructionYear = 2002,
                            District = "Mokotów",
                            Flat = 2,
                            ImagesPath = "9ada2eaf-9b59-48d4-b9fd-6f70f27df0fe",
                            MaxNumberOfInhabitants = 2,
                            Number = "30",
                            OwnerId = 2,
                            PostalCode = "00-000",
                            Province = "Mazowieckie",
                            Street = "Goworka",
                            VerificationStatus = 0,
                            Elevator = true,
                            Floor = 5
                        },
                        new
                        {
                            PropertyId = 10,
                            Area = 45,
                            City = "Piaseczno",
                            ConstructionYear = 1998,
                            District = "Mokotów",
                            Flat = 7,
                            ImagesPath = "5cf06a97-6830-46de-8bbd-d2c3771357c6",
                            MaxNumberOfInhabitants = 2,
                            Number = "3",
                            OwnerId = 1,
                            PostalCode = "00-000",
                            Province = "Mazowieckie",
                            Street = "Ludwiga van Beethovena",
                            VerificationStatus = 0,
                            Elevator = false,
                            Floor = 3
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Moderator", b =>
                {
                    b.HasBaseType("Flats4us.Entities.User");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Moderator");
                });

            modelBuilder.Entity("Flats4us.Entities.OwnerStudent", b =>
                {
                    b.HasBaseType("Flats4us.Entities.User");

                    b.Property<bool>("ActivityStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DocumentExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("OwnerStudent");
                });

            modelBuilder.Entity("Flats4us.Entities.Owner", b =>
                {
                    b.HasBaseType("Flats4us.Entities.OwnerStudent");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Owner");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccountCreationDate = new DateTime(2023, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Warszawa",
                            Email = "mkowalski@gmail.com",
                            Flat = 2,
                            LastLoginDate = new DateTime(2023, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Maciej",
                            Number = 54,
                            Password = "mkowalski123",
                            PhoneNumber = "123456789",
                            PostalCode = "00-000",
                            Street = "Marszałkowska",
                            Surname = "Kowalski",
                            ActivityStatus = false,
                            DocumentExpireDate = new DateTime(2025, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "placeholder",
                            DocumentType = 0,
                            PhotoPath = "placeholder",
                            VerificationStatus = 0,
                            BankAccount = "12341234123412341234123412"
                        },
                        new
                        {
                            UserId = 2,
                            AccountCreationDate = new DateTime(2023, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Kraków",
                            Email = "bnowak@gmail.com",
                            LastLoginDate = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Barbara",
                            Number = 12,
                            Password = "bnowak123",
                            PhoneNumber = "123456789",
                            PostalCode = "00-000",
                            Street = "Długa",
                            Surname = "Nowak",
                            ActivityStatus = false,
                            DocumentExpireDate = new DateTime(2025, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "placeholder",
                            DocumentType = 0,
                            PhotoPath = "placeholder",
                            VerificationStatus = 0,
                            BankAccount = "12341234123412341234123412"
                        },
                        new
                        {
                            UserId = 3,
                            AccountCreationDate = new DateTime(2023, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Łódż",
                            Email = "rzielinski@gmail.com",
                            Flat = 7,
                            LastLoginDate = new DateTime(2023, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rafał",
                            Number = 99,
                            Password = "rzielinski123",
                            PhoneNumber = "123456789",
                            PostalCode = "00-000",
                            Street = "Prosta",
                            Surname = "Zieliński",
                            ActivityStatus = false,
                            DocumentExpireDate = new DateTime(2029, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "placeholder",
                            DocumentType = 0,
                            PhotoPath = "placeholder",
                            VerificationStatus = 0,
                            BankAccount = "12341234123412341234123412"
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Student", b =>
                {
                    b.HasBaseType("Flats4us.Entities.OwnerStudent");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTenant")
                        .HasColumnType("bit");

                    b.Property<int>("RoommatesStatus")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("EquipmentProperty", b =>
                {
                    b.HasOne("Flats4us.Entities.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.Advertisement", b =>
                {
                    b.HasOne("Flats4us.Entities.Moderator", "Moderator")
                        .WithMany("Advertisements")
                        .HasForeignKey("ModeratorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Flats4us.Entities.Argument", b =>
                {
                    b.HasOne("Flats4us.Entities.ArgumentIntervention", "ArgumentIntervention")
                        .WithMany()
                        .HasForeignKey("ArgumentInterventionId");

                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany("Arguments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithMany("Arguments")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArgumentIntervention");

                    b.Navigation("Offer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.ArgumentIntervention", b =>
                {
                    b.HasOne("Flats4us.Entities.Moderator", "Moderator")
                        .WithMany("ArgumentInterventions")
                        .HasForeignKey("ModeratorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Flats4us.Entities.ArgumentMessage", b =>
                {
                    b.HasOne("Flats4us.Entities.Argument", "Argument")
                        .WithMany("ArgumentMessages")
                        .HasForeignKey("ArgumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Argument");
                });

            modelBuilder.Entity("Flats4us.Entities.Chat", b =>
                {
                    b.HasOne("Flats4us.Entities.Owner", "Owner")
                        .WithMany("Chats")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithMany("Chats")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.ChatMessage", b =>
                {
                    b.HasOne("Flats4us.Entities.Chat", "Chat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Flats4us.Entities.Meeting", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", null)
                        .WithMany("Meetings")
                        .HasForeignKey("OfferId");
                });

            modelBuilder.Entity("Flats4us.Entities.Offer", b =>
                {
                    b.HasOne("Flats4us.Entities.Property", "Property")
                        .WithMany("Offers")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Flats4us.Entities.OfferInterest", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany("OfferInterests")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithMany("OfferInterests")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.OfferPromotion", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany("OfferPromotions")
                        .HasForeignKey("OfferPromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionOwnerStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Student", "Evaluated")
                        .WithMany("ReceivedOwnertStudentOpinions")
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Owner", "Evaluator")
                        .WithMany("IssuedOwnerStudentOpinions")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionRent", b =>
                {
                    b.HasOne("Flats4us.Entities.Rent", "Rent")
                        .WithOne("OpinionRent")
                        .HasForeignKey("Flats4us.Entities.OpinionRent", "OpinionRentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionStudentOwner", b =>
                {
                    b.HasOne("Flats4us.Entities.Owner", "Evaluated")
                        .WithMany("ReceivedStudentOwnerOpinions")
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Evaluator")
                        .WithMany("IssuedStudentOwnerOpinions")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionStudentStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Student", "Evaluated")
                        .WithMany("ReceivedStudentStudentOpinions")
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Evaluator")
                        .WithMany("IssuedStudentStudentOpinions")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Flats4us.Entities.Payment", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithMany("Payments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.Property", b =>
                {
                    b.HasOne("Flats4us.Entities.Owner", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Flats4us.Entities.Rent", b =>
                {
                    b.HasOne("Flats4us.Entities.Offer", "Offers")
                        .WithMany("Rents")
                        .HasForeignKey("OffersOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithMany("Rents")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offers");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.SurveyOwnerOffer", b =>
                {
                    b.HasOne("Flats4us.Entities.Owner", "Owner")
                        .WithMany("OwnerOfferSurveys")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Offer", "Offer")
                        .WithOne("SurveyOwnerOffer")
                        .HasForeignKey("Flats4us.Entities.SurveyOwnerOffer", "SurveyOwnerOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Flats4us.Entities.SurveyStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithOne("SurveyStudent")
                        .HasForeignKey("Flats4us.Entities.SurveyStudent", "SurveyStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InterestStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Interest", null)
                        .WithMany()
                        .HasForeignKey("InterestsInterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Meeting", null)
                        .WithMany()
                        .HasForeignKey("MeetingsMeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.Argument", b =>
                {
                    b.Navigation("ArgumentMessages");
                });

            modelBuilder.Entity("Flats4us.Entities.Chat", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("Flats4us.Entities.Offer", b =>
                {
                    b.Navigation("Arguments");

                    b.Navigation("Meetings");

                    b.Navigation("OfferInterests");

                    b.Navigation("OfferPromotions");

                    b.Navigation("Payments");

                    b.Navigation("Rents");

                    b.Navigation("SurveyOwnerOffer")
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.Property", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Flats4us.Entities.Rent", b =>
                {
                    b.Navigation("OpinionRent")
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.Moderator", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("ArgumentInterventions");
                });

            modelBuilder.Entity("Flats4us.Entities.Owner", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("IssuedOwnerStudentOpinions");

                    b.Navigation("OwnerOfferSurveys");

                    b.Navigation("Properties");

                    b.Navigation("ReceivedStudentOwnerOpinions");
                });

            modelBuilder.Entity("Flats4us.Entities.Student", b =>
                {
                    b.Navigation("Arguments");

                    b.Navigation("Chats");

                    b.Navigation("IssuedStudentOwnerOpinions");

                    b.Navigation("IssuedStudentStudentOpinions");

                    b.Navigation("OfferInterests");

                    b.Navigation("Payments");

                    b.Navigation("ReceivedOwnertStudentOpinions");

                    b.Navigation("ReceivedStudentStudentOpinions");

                    b.Navigation("Rents");

                    b.Navigation("SurveyStudent")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
