// <auto-generated />
using System;
using Flats4us.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flats4us.Migrations
{
    [DbContext(typeof(Flats4usContext))]
    [Migration("20230528222024_PropertiesAndEquipment")]
    partial class PropertiesAndEquipment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EquipmentProperty", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("PropertiesPropertyId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId", "PropertiesPropertyId");

                    b.HasIndex("PropertiesPropertyId");

                    b.ToTable("EquipmentProperty");
                });

            modelBuilder.Entity("Flats4us.Entities.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("Flats4us.Entities.Interest", b =>
                {
                    b.Property<int>("InterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterestId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InterestId");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            InterestId = 1,
                            Name = "Sailing"
                        },
                        new
                        {
                            InterestId = 2,
                            Name = "Painting"
                        },
                        new
                        {
                            InterestId = 3,
                            Name = "Photography"
                        },
                        new
                        {
                            InterestId = 4,
                            Name = "Cooking"
                        },
                        new
                        {
                            InterestId = 5,
                            Name = "Gardening"
                        },
                        new
                        {
                            InterestId = 6,
                            Name = "Playing Guitar"
                        },
                        new
                        {
                            InterestId = 7,
                            Name = "Reading Books"
                        },
                        new
                        {
                            InterestId = 8,
                            Name = "Hiking"
                        },
                        new
                        {
                            InterestId = 9,
                            Name = "Dancing"
                        },
                        new
                        {
                            InterestId = 10,
                            Name = "Yoga"
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionOwnerStudent", b =>
                {
                    b.Property<int>("OpinionOwnerStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpinionOwnerStudentId"));

                    b.Property<int>("Check1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("OpinionOwnerStudentId");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("OwnerStudentOpinions");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionStudentOwner", b =>
                {
                    b.Property<int>("OpinionOwnerStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpinionOwnerStudentId"));

                    b.Property<int>("Check1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("OpinionOwnerStudentId");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("OpinionStudentOwner");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionStudentStudent", b =>
                {
                    b.Property<int>("OpinionStudentStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpinionStudentStudentId"));

                    b.Property<int>("Check1")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("OpinionStudentStudentId");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("StudentStudentOpinions");
                });

            modelBuilder.Entity("Flats4us.Entities.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"));

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Elevator")
                        .HasColumnType("bit");

                    b.Property<int>("Flat")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfInhabitants")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleDeedPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.HasKey("PropertyId");

                    b.ToTable("Properties");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Property");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Flats4us.Entities.SurveyStudent", b =>
                {
                    b.Property<int>("SurveyStudentId")
                        .HasColumnType("int");

                    b.Property<bool>("Animals")
                        .HasColumnType("bit");

                    b.Property<bool>("LookingForRoommate")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfRoommates")
                        .HasColumnType("int");

                    b.Property<int>("MaxRoommateAge")
                        .HasColumnType("int");

                    b.Property<int>("MinRoommateAge")
                        .HasColumnType("int");

                    b.Property<int>("Party")
                        .HasColumnType("int");

                    b.Property<int>("RoommateGender")
                        .HasColumnType("int");

                    b.Property<bool>("Smoking")
                        .HasColumnType("bit");

                    b.Property<int>("Sociability")
                        .HasColumnType("int");

                    b.Property<int>("Tidiness")
                        .HasColumnType("int");

                    b.Property<bool>("Vegan")
                        .HasColumnType("bit");

                    b.HasKey("SurveyStudentId");

                    b.ToTable("SurveyStudents");
                });

            modelBuilder.Entity("Flats4us.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("AccountCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Flat")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("InterestStudent", b =>
                {
                    b.Property<int>("InterestsInterestId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsUserId")
                        .HasColumnType("int");

                    b.HasKey("InterestsInterestId", "StudentsUserId");

                    b.HasIndex("StudentsUserId");

                    b.ToTable("InterestStudent");
                });

            modelBuilder.Entity("Flats4us.Entities.Flat", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Property");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.ToTable("Properties", t =>
                        {
                            t.Property("NumberOfRooms")
                                .HasColumnName("Flat_NumberOfRooms");
                        });

                    b.HasDiscriminator().HasValue("Flat");
                });

            modelBuilder.Entity("Flats4us.Entities.House", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Property");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("PlotArea")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("House");
                });

            modelBuilder.Entity("Flats4us.Entities.Room", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Room");
                });

            modelBuilder.Entity("Flats4us.Entities.Moderator", b =>
                {
                    b.HasBaseType("Flats4us.Entities.User");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Moderator");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccountCreationDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Warszawa",
                            Email = "maciej.kowalski@gmail.com",
                            Flat = 2,
                            LastLoginDate = new DateTime(2023, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Maciej",
                            Number = 47,
                            Password = "mkowalski123",
                            PhoneNumber = "456736829",
                            PostalCode = "00-000",
                            Street = "Długa",
                            Surname = "Kowalski",
                            HireDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 2,
                            AccountCreationDate = new DateTime(2023, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Gdańsk",
                            Email = "katarzyna.nowak@gmail.com",
                            Flat = 3,
                            LastLoginDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Katarzyna",
                            Number = 10,
                            Password = "knowak123",
                            PhoneNumber = "512345678",
                            PostalCode = "80-000",
                            Street = "Kwiatowa",
                            Surname = "Nowak",
                            HireDate = new DateTime(2023, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 3,
                            AccountCreationDate = new DateTime(2023, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Kraków",
                            Email = "adam.kowalczyk@gmail.com",
                            Flat = 6,
                            LastLoginDate = new DateTime(2023, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Adam",
                            Number = 20,
                            Password = "akowalczyk789",
                            PhoneNumber = "601234567",
                            PostalCode = "30-001",
                            Street = "Słoneczna",
                            Surname = "Kowalczyk",
                            HireDate = new DateTime(2023, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 4,
                            AccountCreationDate = new DateTime(2023, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Warszawa",
                            Email = "magdalena.wojcik@gmail.com",
                            Flat = 2,
                            LastLoginDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Magdalena",
                            Number = 15,
                            Password = "mwojcik456",
                            PhoneNumber = "712345678",
                            PostalCode = "02-000",
                            Street = "Ogrodowa",
                            Surname = "Wójcik",
                            HireDate = new DateTime(2023, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Flats4us.Entities.Owner", b =>
                {
                    b.HasBaseType("Flats4us.Entities.User");

                    b.Property<bool>("ActivityStatus")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocumentExpireDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationStatus")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Owner");
                });

            modelBuilder.Entity("Flats4us.Entities.Student", b =>
                {
                    b.HasBaseType("Flats4us.Entities.User");

                    b.Property<bool>("ActivityStatus")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DocumentExpireDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationStatus")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Flats4us.Entities.Seeker", b =>
                {
                    b.HasBaseType("Flats4us.Entities.Student");

                    b.HasDiscriminator().HasValue("Seeker");

                    b.HasData(
                        new
                        {
                            UserId = 5,
                            AccountCreationDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Warszawa",
                            Email = "filip.dobrej@gmail.com",
                            Flat = 3,
                            LastLoginDate = new DateTime(2023, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Filip",
                            Number = 7,
                            Password = "fdobrej123",
                            PhoneNumber = "456736829",
                            PostalCode = "00-000",
                            Street = "Krótka",
                            Surname = "Dobrej",
                            ActivityStatus = false,
                            Age = 22,
                            DocumentExpireDate = new DateTime(2024, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "/documents/1",
                            DocumentType = 1,
                            Facebook = "",
                            Instagram = "",
                            PhotoPath = "/profile/1",
                            StudentNumber = "s22023",
                            Twitter = "",
                            University = "PJATK",
                            VerificationStatus = 0,
                            YearOfBirth = 2001
                        },
                        new
                        {
                            UserId = 6,
                            AccountCreationDate = new DateTime(2022, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Poznań",
                            Email = "alicja.dabrowska@gmail.com",
                            Flat = 4,
                            LastLoginDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alicja",
                            Number = 9,
                            Password = "adabrowska789",
                            PhoneNumber = "601234567",
                            PostalCode = "60-001",
                            Street = "Kościuszki",
                            Surname = "Dąbrowska",
                            ActivityStatus = true,
                            Age = 28,
                            DocumentExpireDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "/documents/2",
                            DocumentType = 2,
                            Facebook = "https://www.facebook.com/alicja.dabrowska",
                            Instagram = "https://www.instagram.com/alicja_dabrowska/",
                            PhotoPath = "/profile/2",
                            StudentNumber = "s23423",
                            Twitter = "",
                            University = "Uniwersytet Warszawski",
                            VerificationStatus = 0,
                            YearOfBirth = 1995
                        },
                        new
                        {
                            UserId = 7,
                            AccountCreationDate = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Kraków",
                            Email = "dominik.kowalczyk@gmail.com",
                            Flat = 1,
                            LastLoginDate = new DateTime(2023, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dominik",
                            Number = 12,
                            Password = "dkowalczyk456",
                            PhoneNumber = "712345678",
                            PostalCode = "30-002",
                            Street = "Szkolna",
                            Surname = "Kowalczyk",
                            ActivityStatus = true,
                            Age = 25,
                            DocumentExpireDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "/documents/3",
                            DocumentType = 0,
                            Facebook = "https://www.facebook.com/dominik.kowalczyk",
                            Instagram = "https://www.instagram.com/dominik_kowalczyk/",
                            PhotoPath = "/profile/3",
                            StudentNumber = "s22345",
                            Twitter = "",
                            University = "AGH University of Science and Technology",
                            VerificationStatus = 0,
                            YearOfBirth = 1998
                        },
                        new
                        {
                            UserId = 8,
                            AccountCreationDate = new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Warszawa",
                            Email = "natalia.wojcik@gmail.com",
                            Flat = 2,
                            LastLoginDate = new DateTime(2023, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Natalia",
                            Number = 5,
                            Password = "nwojcik789",
                            PhoneNumber = "601234567",
                            PostalCode = "02-001",
                            Street = "Kwiatowa",
                            Surname = "Wójcik",
                            ActivityStatus = true,
                            Age = 23,
                            DocumentExpireDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "/documents/4",
                            DocumentType = 2,
                            Facebook = "",
                            Instagram = "https://www.instagram.com/natalia_wojcik/",
                            PhotoPath = "/profile/4",
                            StudentNumber = "s22890",
                            Twitter = "https://twitter.com/nwojcik",
                            University = "University of Warsaw",
                            VerificationStatus = 0,
                            YearOfBirth = 2000
                        });
                });

            modelBuilder.Entity("EquipmentProperty", b =>
                {
                    b.HasOne("Flats4us.Entities.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionOwnerStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Student", "Evaluated")
                        .WithMany("ReceivedOwnertStudentOpinions")
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Owner", "Evaluator")
                        .WithMany("IssuedOwnerStudentOpinions")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionStudentOwner", b =>
                {
                    b.HasOne("Flats4us.Entities.Owner", "Evaluated")
                        .WithMany("ReceivedStudentOwnerOpinions")
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Evaluator")
                        .WithMany("IssuedStudentOwnerOpinions")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Flats4us.Entities.OpinionStudentStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Student", "Evaluated")
                        .WithMany("ReceivedStudentStudentOpinions")
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", "Evaluator")
                        .WithMany("IssuedStudentStudentOpinions")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Flats4us.Entities.SurveyStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Student", "Student")
                        .WithOne("SurveyStudent")
                        .HasForeignKey("Flats4us.Entities.SurveyStudent", "SurveyStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InterestStudent", b =>
                {
                    b.HasOne("Flats4us.Entities.Interest", null)
                        .WithMany()
                        .HasForeignKey("InterestsInterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flats4us.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flats4us.Entities.Owner", b =>
                {
                    b.Navigation("IssuedOwnerStudentOpinions");

                    b.Navigation("ReceivedStudentOwnerOpinions");
                });

            modelBuilder.Entity("Flats4us.Entities.Student", b =>
                {
                    b.Navigation("IssuedStudentOwnerOpinions");

                    b.Navigation("IssuedStudentStudentOpinions");

                    b.Navigation("ReceivedOwnertStudentOpinions");

                    b.Navigation("ReceivedStudentStudentOpinions");

                    b.Navigation("SurveyStudent")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
