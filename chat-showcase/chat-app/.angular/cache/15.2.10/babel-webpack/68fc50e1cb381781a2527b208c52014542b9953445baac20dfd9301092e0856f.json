{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nexport class ChatService {\n  constructor() {\n    this.onReceiveMessageCallbacks = [];\n    this.onReceivePrivateMessageCallbacks = [];\n    this.onReceiveGroupMessageCallbacks = [];\n    this.currentGroupChatId = 0;\n    this.startConnection = token => {\n      this.stopConnection();\n      this.hubConnection = new signalR.HubConnectionBuilder().withUrl('https://localhost:44376/chatHub', {\n        accessTokenFactory: () => token ? token : ''\n      }).build();\n      this.hubConnection.start().then(() => {\n        console.log('Connection started');\n        this.registerEventHandlers();\n      }).catch(err => console.log('Error while starting connection: ' + err));\n    };\n    // registerGroupMessageHandler(callback: (groupChatId: number, userId: number, message: string) => void): void {\n    //   this.hubConnection.on('ReceiveGroupMessage', callback);\n    // }\n    // public receivePrivateMessage = (callback: (user: string, message: string) => void) => {\n    //   this.hubConnection.on('ReceivePrivateMessage', (user, message) => {\n    //     console.log('Private message received:', user, message);\n    //     callback(user, message);\n    //   });\n    // }\n    this.sendMessage = (user, message) => {\n      this.hubConnection.invoke('SendMessage', user, message).catch(err => console.error(err));\n    };\n    this.stopConnection = () => {\n      if (this.isConnected()) {\n        this.hubConnection.stop().then(() => console.log('Connection stopped')).catch(err => console.log('Error while stopping connection: ' + err));\n      }\n    };\n  }\n  registerEventHandlers() {\n    this.onReceiveMessageCallbacks.forEach(callback => {\n      this.hubConnection.on('ReceiveMessage', (user, message) => {\n        console.log('Broadcast message received:', user, message);\n        callback(user, message);\n      });\n    });\n    this.onReceivePrivateMessageCallbacks.forEach(callback => {\n      this.hubConnection.on('ReceivePrivateMessage', (user, message) => {\n        console.log('Private message received:', user, message);\n        callback(user, message);\n      });\n    });\n    this.onReceiveGroupMessageCallbacks.forEach(callback => {\n      this.hubConnection.on('ReceiveGroupMessage', (groupId, user, message) => {\n        console.log('Group message received:', groupId, user, message);\n        callback(groupId, user, message);\n      });\n    });\n  }\n  addReceiveMessageHandler(callback) {\n    this.onReceiveMessageCallbacks.push(callback);\n  }\n  addReceivePrivateMessageHandler(callback) {\n    this.onReceivePrivateMessageCallbacks.push(callback);\n  }\n  addReceiveGroupMessageHandler(callback) {\n    this.onReceiveGroupMessageCallbacks.push(callback);\n  }\n  sendPrivateMessage(receiverId, message) {\n    this.hubConnection.invoke('SendPrivateMessage', receiverId, message).catch(err => console.error(err));\n  }\n  joinGroupChat(groupChatId) {\n    this.hubConnection.invoke('LeaveGroupChat', this.currentGroupChatId).catch(err => console.error('Error while leaving group chat: ', err));\n    this.hubConnection.invoke('JoinGroupChat', groupChatId).catch(err => console.error('Error while joining group chat: ', err));\n  }\n  sendGroupMessage(groupChatId, message) {\n    this.hubConnection.invoke('SendGroupMessage', groupChatId, message).catch(err => console.error('Error while sending message: ', err));\n  }\n  // public receiveMessage = (callback: (user: string, message: string) => void) => {\n  //   this.hubConnection.on('ReceiveMessage', (user, message) => {\n  //     console.log('Broadcast message received:', user, message);\n  //     callback(user, message);\n  //   });\n  // }\n  isConnected() {\n    return this.hubConnection && this.hubConnection.state === signalR.HubConnectionState.Connected;\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["signalR","ChatService","constructor","token","stopConnection","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","build","start","then","console","log","registerEventHandlers","catch","err","user","message","invoke","error","isConnected","stop","onReceiveMessageCallbacks","forEach","callback","on","onReceivePrivateMessageCallbacks","onReceiveGroupMessageCallbacks","groupId","addReceiveMessageHandler","push","addReceivePrivateMessageHandler","addReceiveGroupMessageHandler","sendPrivateMessage","receiverId","joinGroupChat","groupChatId","currentGroupChatId","sendGroupMessage","state","HubConnectionState","Connected","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\source\\repos\\Flats4us\\Flats4us\\chat-showcase\\chat-app\\src\\app\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport * as signalR from '@microsoft/signalr';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService {\r\n  private hubConnection!: signalR.HubConnection;\r\n  private onReceiveMessageCallbacks: ((user: string, message: string) => void)[] = [];\r\n  private onReceivePrivateMessageCallbacks: ((user: string, message: string) => void)[] = [];\r\n  private onReceiveGroupMessageCallbacks: ((groupId: number, user: string, message: string) => void)[] = [];\r\n  private currentGroupChatId = 0;\r\n\r\n  public startConnection = (token?: string) => {\r\n    this.stopConnection();\r\n    this.hubConnection = new signalR.HubConnectionBuilder()\r\n                            .withUrl('https://localhost:44376/chatHub', {\r\n                              accessTokenFactory: () => token ? token : ''\r\n                            })\r\n                            .build();\r\n    \r\n    this.hubConnection\r\n      .start()\r\n      .then(() => {\r\n        console.log('Connection started');\r\n        this.registerEventHandlers();\r\n      })\r\n      .catch(err => console.log('Error while starting connection: ' + err));\r\n  }\r\n\r\n  private registerEventHandlers() {\r\n    this.onReceiveMessageCallbacks.forEach(callback => {\r\n      this.hubConnection.on('ReceiveMessage', (user, message) => {\r\n        console.log('Broadcast message received:', user, message);\r\n        callback(user, message);\r\n      });\r\n    });\r\n\r\n    this.onReceivePrivateMessageCallbacks.forEach(callback => {\r\n      this.hubConnection.on('ReceivePrivateMessage', (user, message) => {\r\n        console.log('Private message received:', user, message);\r\n        callback(user, message);\r\n      });\r\n    });\r\n\r\n    this.onReceiveGroupMessageCallbacks.forEach(callback => {\r\n      this.hubConnection.on('ReceiveGroupMessage', (groupId, user, message) => {\r\n        console.log('Group message received:',groupId, user, message);\r\n        callback(groupId, user, message);\r\n      });\r\n    });\r\n  }\r\n\r\n  public addReceiveMessageHandler(callback: (user: string, message: string) => void) {\r\n    this.onReceiveMessageCallbacks.push(callback);\r\n  }\r\n\r\n  public addReceivePrivateMessageHandler(callback: (user: string, message: string) => void) {\r\n    this.onReceivePrivateMessageCallbacks.push(callback);\r\n  }\r\n\r\n  public addReceiveGroupMessageHandler(callback: (groupId: number, user: string, message: string) => void) {\r\n    this.onReceiveGroupMessageCallbacks.push(callback);\r\n  }\r\n\r\n  public sendPrivateMessage(receiverId: number, message: string) {\r\n    this.hubConnection.invoke('SendPrivateMessage', receiverId, message)\r\n      .catch(err => console.error(err));\r\n  }\r\n\r\n  joinGroupChat(groupChatId: number): void {\r\n    this.hubConnection.invoke('LeaveGroupChat', this.currentGroupChatId)\r\n        .catch(err => console.error('Error while leaving group chat: ', err));\r\n    this.hubConnection.invoke('JoinGroupChat', groupChatId)\r\n        .catch(err => console.error('Error while joining group chat: ', err));\r\n    \r\n  }\r\n\r\n  sendGroupMessage(groupChatId: number, message: string): void {\r\n    this.hubConnection.invoke('SendGroupMessage', groupChatId, message)\r\n        .catch(err => console.error('Error while sending message: ', err));\r\n  }\r\n\r\n  // registerGroupMessageHandler(callback: (groupChatId: number, userId: number, message: string) => void): void {\r\n  //   this.hubConnection.on('ReceiveGroupMessage', callback);\r\n  // }\r\n  // public receivePrivateMessage = (callback: (user: string, message: string) => void) => {\r\n  //   this.hubConnection.on('ReceivePrivateMessage', (user, message) => {\r\n  //     console.log('Private message received:', user, message);\r\n  //     callback(user, message);\r\n  //   });\r\n  // }\r\n  \r\n  public sendMessage = (user: string, message: string) => {\r\n\r\n    this.hubConnection.invoke('SendMessage', user, message)\r\n      .catch(err => console.error(err));\r\n  }\r\n\r\n  // public receiveMessage = (callback: (user: string, message: string) => void) => {\r\n  //   this.hubConnection.on('ReceiveMessage', (user, message) => {\r\n  //     console.log('Broadcast message received:', user, message);\r\n\r\n  //     callback(user, message);\r\n  //   });\r\n  // }\r\n  \r\n\r\n  public isConnected(): boolean {\r\n    return this.hubConnection && this.hubConnection.state === signalR.HubConnectionState.Connected;\r\n}\r\n\r\n  public stopConnection = () => {\r\n    if (this.isConnected()) {\r\n        this.hubConnection.stop()\r\n            .then(() => console.log('Connection stopped'))\r\n            .catch(err => console.log('Error while stopping connection: ' + err));\r\n    }\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}