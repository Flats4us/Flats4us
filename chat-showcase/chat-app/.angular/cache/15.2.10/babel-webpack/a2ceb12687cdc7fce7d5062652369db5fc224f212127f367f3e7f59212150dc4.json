{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  intercept(req, next) {\n    const token = localStorage.getItem('jwt'); // Assuming the token is stored in localStorage\n    if (token) {\n      const cloned = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(cloned);\n    } else {\n      return next.handle(req);\n    }\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,eAAe;EAE1BC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IAE3C,IAAIF,KAAK,EAAE;MACT,MAAMG,MAAM,GAAGL,GAAG,CAACM,KAAK,CAAC;QACvBC,OAAO,EAAEP,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUN,KAAK,EAAE;OAC5D,CAAC;MAEF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,MAAM,CAAC;KAC3B,MAAM;MACL,OAAOJ,IAAI,CAACQ,MAAM,CAACT,GAAG,CAAC;;EAE3B;EAAC;qBAdUF,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAY,SAAfZ,eAAe;EAAA","names":["AuthInterceptor","intercept","req","next","token","localStorage","getItem","cloned","clone","headers","set","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\User\\source\\repos\\Flats4us\\Flats4us\\chat-showcase\\chat-app\\src\\app\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  \r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const token = localStorage.getItem('jwt'); // Assuming the token is stored in localStorage\r\n\r\n    if (token) {\r\n      const cloned = req.clone({\r\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\r\n      });\r\n\r\n      return next.handle(cloned);\r\n    } else {\r\n      return next.handle(req);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}