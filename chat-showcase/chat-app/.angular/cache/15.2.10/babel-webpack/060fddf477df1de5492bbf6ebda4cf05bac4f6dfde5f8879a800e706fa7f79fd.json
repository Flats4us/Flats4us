{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nexport class ChatService {\n  constructor() {\n    this.startConnection = token => {\n      this.stopConnection();\n      this.hubConnection = new signalR.HubConnectionBuilder().withUrl('https://localhost:44376/chatHub', {\n        accessTokenFactory: () => token ? token : ''\n      }).build();\n      this.hubConnection.start().then(() => console.log('Connection started')).catch(err => console.log('Error while starting connection: ' + err));\n    };\n    this.receivePrivateMessage = callback => {\n      this.hubConnection.on('ReceivePrivateMessage', (user, message) => {\n        console.log('Private message received:', user, message);\n        callback(user, message);\n      });\n    };\n    this.sendMessage = (user, message) => {\n      this.hubConnection.invoke('SendMessage', user, message).catch(err => console.error(err));\n    };\n    this.receiveMessage = callback => {\n      this.hubConnection.on('ReceiveMessage', (user, message) => {\n        console.log('Broadcast message received:', user, message);\n        callback(user, message);\n      });\n    };\n    this.stopConnection = () => {\n      if (this.isConnected()) {\n        this.hubConnection.stop().then(() => console.log('Connection stopped')).catch(err => console.log('Error while stopping connection: ' + err));\n      }\n    };\n  }\n  sendPrivateMessage(receiverId, message) {\n    this.hubConnection.invoke('SendPrivateMessage', receiverId, message).catch(err => console.error(err));\n  }\n  isConnected() {\n    return this.hubConnection && this.hubConnection.state === signalR.HubConnectionState.Connected;\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;;AAK7C,OAAM,MAAOC,WAAW;EAHxBC;IAMS,oBAAe,GAAIC,KAAc,IAAI;MAC1C,IAAI,CAACC,cAAc,EAAE;MACrB,IAAI,CAACC,aAAa,GAAG,IAAIL,OAAO,CAACM,oBAAoB,EAAE,CAC9BC,OAAO,CAAC,iCAAiC,EAAE;QAC1CC,kBAAkB,EAAE,MAAML,KAAK,GAAGA,KAAK,GAAG;OAC3C,CAAC,CACDM,KAAK,EAAE;MAEhC,IAAI,CAACJ,aAAa,CACfK,KAAK,EAAE,CACPC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAC7CC,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACC,GAAG,CAAC,mCAAmC,GAAGE,GAAG,CAAC,CAAC;IACzE,CAAC;IAMM,0BAAqB,GAAIC,QAAiD,IAAI;MACnF,IAAI,CAACX,aAAa,CAACY,EAAE,CAAC,uBAAuB,EAAE,CAACC,IAAI,EAAEC,OAAO,KAAI;QAC/DP,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEK,IAAI,EAAEC,OAAO,CAAC;QACvDH,QAAQ,CAACE,IAAI,EAAEC,OAAO,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC;IAEM,gBAAW,GAAG,CAACD,IAAY,EAAEC,OAAe,KAAI;MAErD,IAAI,CAACd,aAAa,CAACe,MAAM,CAAC,aAAa,EAAEF,IAAI,EAAEC,OAAO,CAAC,CACpDL,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACS,KAAK,CAACN,GAAG,CAAC,CAAC;IACrC,CAAC;IAEM,mBAAc,GAAIC,QAAiD,IAAI;MAC5E,IAAI,CAACX,aAAa,CAACY,EAAE,CAAC,gBAAgB,EAAE,CAACC,IAAI,EAAEC,OAAO,KAAI;QACxDP,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEK,IAAI,EAAEC,OAAO,CAAC;QAEzDH,QAAQ,CAACE,IAAI,EAAEC,OAAO,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC;IAOM,mBAAc,GAAG,MAAK;MAC3B,IAAI,IAAI,CAACG,WAAW,EAAE,EAAE;QACpB,IAAI,CAACjB,aAAa,CAACkB,IAAI,EAAE,CACpBZ,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAC7CC,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACC,GAAG,CAAC,mCAAmC,GAAGE,GAAG,CAAC,CAAC;;IAE/E,CAAC;;EApCMS,kBAAkB,CAACC,UAAkB,EAAEN,OAAe;IAC3D,IAAI,CAACd,aAAa,CAACe,MAAM,CAAC,oBAAoB,EAAEK,UAAU,EAAEN,OAAO,CAAC,CACjEL,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACS,KAAK,CAACN,GAAG,CAAC,CAAC;EACrC;EAuBOO,WAAW;IAChB,OAAO,IAAI,CAACjB,aAAa,IAAI,IAAI,CAACA,aAAa,CAACqB,KAAK,KAAK1B,OAAO,CAAC2B,kBAAkB,CAACC,SAAS;EAClG;EAAC;qBA7CY3B,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA4B,SAAX5B,WAAW;IAAA6B,YAFV;EAAM","names":["signalR","ChatService","constructor","token","stopConnection","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","build","start","then","console","log","catch","err","callback","on","user","message","invoke","error","isConnected","stop","sendPrivateMessage","receiverId","state","HubConnectionState","Connected","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\source\\repos\\Flats4us\\Flats4us\\chat-showcase\\chat-app\\src\\app\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport * as signalR from '@microsoft/signalr';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService {\r\n  private hubConnection!: signalR.HubConnection;\r\n\r\n  public startConnection = (token?: string) => {\r\n    this.stopConnection();\r\n    this.hubConnection = new signalR.HubConnectionBuilder()\r\n                            .withUrl('https://localhost:44376/chatHub', {\r\n                              accessTokenFactory: () => token ? token : ''\r\n                            })\r\n                            .build();\r\n    \r\n    this.hubConnection\r\n      .start()\r\n      .then(() => console.log('Connection started'))\r\n      .catch(err => console.log('Error while starting connection: ' + err));\r\n  }\r\n\r\n  public sendPrivateMessage(receiverId: number, message: string) {\r\n    this.hubConnection.invoke('SendPrivateMessage', receiverId, message)\r\n      .catch(err => console.error(err));\r\n  }\r\n  public receivePrivateMessage = (callback: (user: string, message: string) => void) => {\r\n    this.hubConnection.on('ReceivePrivateMessage', (user, message) => {\r\n      console.log('Private message received:', user, message);\r\n      callback(user, message);\r\n    });\r\n  }\r\n  \r\n  public sendMessage = (user: string, message: string) => {\r\n\r\n    this.hubConnection.invoke('SendMessage', user, message)\r\n      .catch(err => console.error(err));\r\n  }\r\n\r\n  public receiveMessage = (callback: (user: string, message: string) => void) => {\r\n    this.hubConnection.on('ReceiveMessage', (user, message) => {\r\n      console.log('Broadcast message received:', user, message);\r\n\r\n      callback(user, message);\r\n    });\r\n  }\r\n  \r\n\r\n  public isConnected(): boolean {\r\n    return this.hubConnection && this.hubConnection.state === signalR.HubConnectionState.Connected;\r\n}\r\n\r\n  public stopConnection = () => {\r\n    if (this.isConnected()) {\r\n        this.hubConnection.stop()\r\n            .then(() => console.log('Connection stopped'))\r\n            .catch(err => console.log('Error while stopping connection: ' + err));\r\n    }\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}